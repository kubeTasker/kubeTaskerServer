// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/core.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Core_CreateApi_FullMethodName                           = "/core.Core/createApi"
	Core_UpdateApi_FullMethodName                           = "/core.Core/updateApi"
	Core_GetApiList_FullMethodName                          = "/core.Core/getApiList"
	Core_GetApiById_FullMethodName                          = "/core.Core/getApiById"
	Core_DeleteApi_FullMethodName                           = "/core.Core/deleteApi"
	Core_GetMenuAuthority_FullMethodName                    = "/core.Core/getMenuAuthority"
	Core_CreateOrUpdateMenuAuthority_FullMethodName         = "/core.Core/createOrUpdateMenuAuthority"
	Core_InitDatabase_FullMethodName                        = "/core.Core/initDatabase"
	Core_CreateDepartment_FullMethodName                    = "/core.Core/createDepartment"
	Core_UpdateDepartment_FullMethodName                    = "/core.Core/updateDepartment"
	Core_GetDepartmentList_FullMethodName                   = "/core.Core/getDepartmentList"
	Core_GetDepartmentById_FullMethodName                   = "/core.Core/getDepartmentById"
	Core_DeleteDepartment_FullMethodName                    = "/core.Core/deleteDepartment"
	Core_CreateDictionary_FullMethodName                    = "/core.Core/createDictionary"
	Core_UpdateDictionary_FullMethodName                    = "/core.Core/updateDictionary"
	Core_GetDictionaryList_FullMethodName                   = "/core.Core/getDictionaryList"
	Core_GetDictionaryById_FullMethodName                   = "/core.Core/getDictionaryById"
	Core_DeleteDictionary_FullMethodName                    = "/core.Core/deleteDictionary"
	Core_CreateDictionaryDetail_FullMethodName              = "/core.Core/createDictionaryDetail"
	Core_UpdateDictionaryDetail_FullMethodName              = "/core.Core/updateDictionaryDetail"
	Core_GetDictionaryDetailList_FullMethodName             = "/core.Core/getDictionaryDetailList"
	Core_GetDictionaryDetailById_FullMethodName             = "/core.Core/getDictionaryDetailById"
	Core_DeleteDictionaryDetail_FullMethodName              = "/core.Core/deleteDictionaryDetail"
	Core_GetDictionaryDetailByDictionaryName_FullMethodName = "/core.Core/getDictionaryDetailByDictionaryName"
	Core_GetConfigMaps_FullMethodName                       = "/core.Core/getConfigMaps"
	Core_GetConfigMapDetail_FullMethodName                  = "/core.Core/getConfigMapDetail"
	Core_DeleteConfigMap_FullMethodName                     = "/core.Core/deleteConfigMap"
	Core_UpdateConfigMap_FullMethodName                     = "/core.Core/updateConfigMap"
	Core_GetDeployments_FullMethodName                      = "/core.Core/getDeployments"
	Core_GetDeploymentDetail_FullMethodName                 = "/core.Core/getDeploymentDetail"
	Core_ScaleDeployment_FullMethodName                     = "/core.Core/scaleDeployment"
	Core_CreateDeployment_FullMethodName                    = "/core.Core/createDeployment"
	Core_DeleteDeployment_FullMethodName                    = "/core.Core/deleteDeployment"
	Core_RestartDeployment_FullMethodName                   = "/core.Core/restartDeployment"
	Core_UpdateDeployment_FullMethodName                    = "/core.Core/updateDeployment"
	Core_GetDeployNumPerNp_FullMethodName                   = "/core.Core/getDeployNumPerNp"
	Core_GetNamespaces_FullMethodName                       = "/core.Core/getNamespaces"
	Core_GetNamespaceDetail_FullMethodName                  = "/core.Core/getNamespaceDetail"
	Core_DeleteNamespace_FullMethodName                     = "/core.Core/deleteNamespace"
	Core_GetNodes_FullMethodName                            = "/core.Core/getNodes"
	Core_GetNodeDetail_FullMethodName                       = "/core.Core/getNodeDetail"
	Core_GetPods_FullMethodName                             = "/core.Core/getPods"
	Core_GetPodDetail_FullMethodName                        = "/core.Core/getPodDetail"
	Core_DeletePod_FullMethodName                           = "/core.Core/deletePod"
	Core_UpdatePod_FullMethodName                           = "/core.Core/updatePod"
	Core_GetPodContainer_FullMethodName                     = "/core.Core/getPodContainer"
	Core_GetPodLog_FullMethodName                           = "/core.Core/getPodLog"
	Core_GetPodNumPerNp_FullMethodName                      = "/core.Core/getPodNumPerNp"
	Core_GetServices_FullMethodName                         = "/core.Core/getServices"
	Core_GetServiceDetail_FullMethodName                    = "/core.Core/getServiceDetail"
	Core_CreateService_FullMethodName                       = "/core.Core/createService"
	Core_DeleteService_FullMethodName                       = "/core.Core/deleteService"
	Core_UpdateService_FullMethodName                       = "/core.Core/updateService"
	Core_CreateMenu_FullMethodName                          = "/core.Core/createMenu"
	Core_UpdateMenu_FullMethodName                          = "/core.Core/updateMenu"
	Core_DeleteMenu_FullMethodName                          = "/core.Core/deleteMenu"
	Core_GetMenuListByRole_FullMethodName                   = "/core.Core/getMenuListByRole"
	Core_GetMenuList_FullMethodName                         = "/core.Core/getMenuList"
	Core_CreateOauthProvider_FullMethodName                 = "/core.Core/createOauthProvider"
	Core_UpdateOauthProvider_FullMethodName                 = "/core.Core/updateOauthProvider"
	Core_GetOauthProviderList_FullMethodName                = "/core.Core/getOauthProviderList"
	Core_GetOauthProviderById_FullMethodName                = "/core.Core/getOauthProviderById"
	Core_DeleteOauthProvider_FullMethodName                 = "/core.Core/deleteOauthProvider"
	Core_OauthLogin_FullMethodName                          = "/core.Core/oauthLogin"
	Core_OauthCallback_FullMethodName                       = "/core.Core/oauthCallback"
	Core_CreatePosition_FullMethodName                      = "/core.Core/createPosition"
	Core_UpdatePosition_FullMethodName                      = "/core.Core/updatePosition"
	Core_GetPositionList_FullMethodName                     = "/core.Core/getPositionList"
	Core_GetPositionById_FullMethodName                     = "/core.Core/getPositionById"
	Core_DeletePosition_FullMethodName                      = "/core.Core/deletePosition"
	Core_CreateRole_FullMethodName                          = "/core.Core/createRole"
	Core_UpdateRole_FullMethodName                          = "/core.Core/updateRole"
	Core_GetRoleList_FullMethodName                         = "/core.Core/getRoleList"
	Core_GetRoleById_FullMethodName                         = "/core.Core/getRoleById"
	Core_DeleteRole_FullMethodName                          = "/core.Core/deleteRole"
	Core_CreateToken_FullMethodName                         = "/core.Core/createToken"
	Core_DeleteToken_FullMethodName                         = "/core.Core/deleteToken"
	Core_GetTokenList_FullMethodName                        = "/core.Core/getTokenList"
	Core_GetTokenById_FullMethodName                        = "/core.Core/getTokenById"
	Core_BlockUserAllToken_FullMethodName                   = "/core.Core/blockUserAllToken"
	Core_UpdateToken_FullMethodName                         = "/core.Core/updateToken"
	Core_CreateUser_FullMethodName                          = "/core.Core/createUser"
	Core_UpdateUser_FullMethodName                          = "/core.Core/updateUser"
	Core_GetUserList_FullMethodName                         = "/core.Core/getUserList"
	Core_GetUserById_FullMethodName                         = "/core.Core/getUserById"
	Core_GetUserByUsername_FullMethodName                   = "/core.Core/getUserByUsername"
	Core_DeleteUser_FullMethodName                          = "/core.Core/deleteUser"
)

// CoreClient is the client API for Core service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreClient interface {
	// API management
	// group: api
	CreateApi(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: api
	UpdateApi(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: api
	GetApiList(ctx context.Context, in *ApiListReq, opts ...grpc.CallOption) (*ApiListResp, error)
	// group: api
	GetApiById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ApiInfo, error)
	// group: api
	DeleteApi(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: authority
	GetMenuAuthority(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RoleMenuAuthorityResp, error)
	// group: authority
	CreateOrUpdateMenuAuthority(ctx context.Context, in *RoleMenuAuthorityReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	// Department management
	// group: department
	CreateDepartment(ctx context.Context, in *DepartmentInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: department
	UpdateDepartment(ctx context.Context, in *DepartmentInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: department
	GetDepartmentList(ctx context.Context, in *DepartmentListReq, opts ...grpc.CallOption) (*DepartmentListResp, error)
	// group: department
	GetDepartmentById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DepartmentInfo, error)
	// group: department
	DeleteDepartment(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// Dictionary management
	// group: dictionary
	CreateDictionary(ctx context.Context, in *DictionaryInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: dictionary
	UpdateDictionary(ctx context.Context, in *DictionaryInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: dictionary
	GetDictionaryList(ctx context.Context, in *DictionaryListReq, opts ...grpc.CallOption) (*DictionaryListResp, error)
	// group: dictionary
	GetDictionaryById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DictionaryInfo, error)
	// group: dictionary
	DeleteDictionary(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// DictionaryDetail management
	// group: dictionarydetail
	CreateDictionaryDetail(ctx context.Context, in *DictionaryDetailInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: dictionarydetail
	UpdateDictionaryDetail(ctx context.Context, in *DictionaryDetailInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: dictionarydetail
	GetDictionaryDetailList(ctx context.Context, in *DictionaryDetailListReq, opts ...grpc.CallOption) (*DictionaryDetailListResp, error)
	// group: dictionarydetail
	GetDictionaryDetailById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DictionaryDetailInfo, error)
	// group: dictionarydetail
	DeleteDictionaryDetail(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: dictionarydetail
	GetDictionaryDetailByDictionaryName(ctx context.Context, in *BaseMsg, opts ...grpc.CallOption) (*DictionaryDetailListResp, error)
	// group: k8sconfigmap
	GetConfigMaps(ctx context.Context, in *GetConfigMapsReq, opts ...grpc.CallOption) (*GetConfigMapsResp, error)
	// group: k8sconfigmap
	GetConfigMapDetail(ctx context.Context, in *GetConfigMapDetailReq, opts ...grpc.CallOption) (*GetConfigMapDetailResp, error)
	// group: k8sconfigmap
	DeleteConfigMap(ctx context.Context, in *DeleteConfigMapReq, opts ...grpc.CallOption) (*DeleteConfigMapResp, error)
	// group: k8sconfigmap
	UpdateConfigMap(ctx context.Context, in *UpdateConfigMapReq, opts ...grpc.CallOption) (*UpdateConfigMapResp, error)
	// group: k8sdeployment
	GetDeployments(ctx context.Context, in *GetDeploymentsReq, opts ...grpc.CallOption) (*GetDeploymentsResp, error)
	// group: k8sdeployment
	GetDeploymentDetail(ctx context.Context, in *GetDeploymentDetailReq, opts ...grpc.CallOption) (*GetDeploymentDetailResp, error)
	// group: k8sdeployment
	ScaleDeployment(ctx context.Context, in *ScaleDeploymentReq, opts ...grpc.CallOption) (*ScaleDeploymentResp, error)
	// group: k8sdeployment
	CreateDeployment(ctx context.Context, in *CreateDeploymentReq, opts ...grpc.CallOption) (*CreateDeploymentResp, error)
	// group: k8sdeployment
	DeleteDeployment(ctx context.Context, in *DeleteDeploymentReq, opts ...grpc.CallOption) (*DeleteDeploymentResp, error)
	// group: k8sdeployment
	RestartDeployment(ctx context.Context, in *RestartDeploymentReq, opts ...grpc.CallOption) (*RestartDeploymentResp, error)
	// group: k8sdeployment
	UpdateDeployment(ctx context.Context, in *UpdateDeploymentReq, opts ...grpc.CallOption) (*UpdateDeploymentResp, error)
	// group: k8sdeployment
	GetDeployNumPerNp(ctx context.Context, in *GetDeployNumPerNpReq, opts ...grpc.CallOption) (*GetDeployNumPerNpResp, error)
	// group: k8snamespace
	GetNamespaces(ctx context.Context, in *GetNamespacesReq, opts ...grpc.CallOption) (*GetNamespacesResp, error)
	// group: k8snamespace
	GetNamespaceDetail(ctx context.Context, in *GetNamespaceDetailReq, opts ...grpc.CallOption) (*GetNamespaceDetailResp, error)
	// group: k8snamespace
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceReq, opts ...grpc.CallOption) (*DeleteNamespaceResp, error)
	// group: k8snode
	GetNodes(ctx context.Context, in *GetNodesReq, opts ...grpc.CallOption) (*GetNodesResp, error)
	// group: k8snode
	GetNodeDetail(ctx context.Context, in *GetNodeDetailReq, opts ...grpc.CallOption) (*GetNodeDetailResp, error)
	// group: k8spod
	GetPods(ctx context.Context, in *GetPodsReq, opts ...grpc.CallOption) (*GetPodsResp, error)
	// group: k8spod
	GetPodDetail(ctx context.Context, in *GetPodDetailReq, opts ...grpc.CallOption) (*GetPodDetailResp, error)
	// group: k8spod
	DeletePod(ctx context.Context, in *DeletePodReq, opts ...grpc.CallOption) (*DeletePodResp, error)
	// group: k8spod
	UpdatePod(ctx context.Context, in *UpdatePodReq, opts ...grpc.CallOption) (*UpdatePodResp, error)
	// group: k8spod
	GetPodContainer(ctx context.Context, in *GetPodContainerReq, opts ...grpc.CallOption) (*GetPodContainerResp, error)
	// group: k8spod
	GetPodLog(ctx context.Context, in *GetPodLogReq, opts ...grpc.CallOption) (*GetPodLogResp, error)
	// group: k8spod
	GetPodNumPerNp(ctx context.Context, in *GetPodNumPerNpReq, opts ...grpc.CallOption) (*GetPodNumPerNpResp, error)
	// group: k8sservice
	GetServices(ctx context.Context, in *GetServicesReq, opts ...grpc.CallOption) (*GetServicesResp, error)
	// group: k8sservice
	GetServiceDetail(ctx context.Context, in *GetServiceDetailReq, opts ...grpc.CallOption) (*GetServiceDetailResp, error)
	// group: k8sservice
	CreateService(ctx context.Context, in *CreateServiceReq, opts ...grpc.CallOption) (*CreateServiceResp, error)
	// group: k8sservice
	DeleteService(ctx context.Context, in *DeleteServiceReq, opts ...grpc.CallOption) (*DeleteServiceResp, error)
	// group: k8sservice
	UpdateService(ctx context.Context, in *UpdateServiceReq, opts ...grpc.CallOption) (*UpdateServiceResp, error)
	// group: menu
	CreateMenu(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: menu
	UpdateMenu(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: menu
	DeleteMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: menu
	GetMenuListByRole(ctx context.Context, in *BaseMsg, opts ...grpc.CallOption) (*MenuInfoList, error)
	// group: menu
	GetMenuList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuInfoList, error)
	// OauthProvider management
	// group: oauthprovider
	CreateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: oauthprovider
	UpdateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: oauthprovider
	GetOauthProviderList(ctx context.Context, in *OauthProviderListReq, opts ...grpc.CallOption) (*OauthProviderListResp, error)
	// group: oauthprovider
	GetOauthProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthProviderInfo, error)
	// group: oauthprovider
	DeleteOauthProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: oauthprovider
	OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthRedirectResp, error)
	// group: oauthprovider
	OauthCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*UserInfo, error)
	// Position management
	// group: position
	CreatePosition(ctx context.Context, in *PositionInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: position
	UpdatePosition(ctx context.Context, in *PositionInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: position
	GetPositionList(ctx context.Context, in *PositionListReq, opts ...grpc.CallOption) (*PositionListResp, error)
	// group: position
	GetPositionById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*PositionInfo, error)
	// group: position
	DeletePosition(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// Role management
	// group: role
	CreateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: role
	UpdateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: role
	GetRoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error)
	// group: role
	GetRoleById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RoleInfo, error)
	// group: role
	DeleteRole(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// Token management
	// group: token
	CreateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
	// group: token
	DeleteToken(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: token
	GetTokenList(ctx context.Context, in *TokenListReq, opts ...grpc.CallOption) (*TokenListResp, error)
	// group: token
	GetTokenById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TokenInfo, error)
	// group: token
	BlockUserAllToken(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: token
	UpdateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// User management
	// group: user
	CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
	// group: user
	UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: user
	GetUserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
	// group: user
	GetUserById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*UserInfo, error)
	// group: user
	GetUserByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*UserInfo, error)
	// group: user
	DeleteUser(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
}

type coreClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreClient(cc grpc.ClientConnInterface) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) CreateApi(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateApi(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetApiList(ctx context.Context, in *ApiListReq, opts ...grpc.CallOption) (*ApiListResp, error) {
	out := new(ApiListResp)
	err := c.cc.Invoke(ctx, Core_GetApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetApiById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ApiInfo, error) {
	out := new(ApiInfo)
	err := c.cc.Invoke(ctx, Core_GetApiById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteApi(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetMenuAuthority(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RoleMenuAuthorityResp, error) {
	out := new(RoleMenuAuthorityResp)
	err := c.cc.Invoke(ctx, Core_GetMenuAuthority_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateOrUpdateMenuAuthority(ctx context.Context, in *RoleMenuAuthorityReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_CreateOrUpdateMenuAuthority_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_InitDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateDepartment(ctx context.Context, in *DepartmentInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateDepartment(ctx context.Context, in *DepartmentInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetDepartmentList(ctx context.Context, in *DepartmentListReq, opts ...grpc.CallOption) (*DepartmentListResp, error) {
	out := new(DepartmentListResp)
	err := c.cc.Invoke(ctx, Core_GetDepartmentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetDepartmentById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DepartmentInfo, error) {
	out := new(DepartmentInfo)
	err := c.cc.Invoke(ctx, Core_GetDepartmentById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteDepartment(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateDictionary(ctx context.Context, in *DictionaryInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateDictionary(ctx context.Context, in *DictionaryInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetDictionaryList(ctx context.Context, in *DictionaryListReq, opts ...grpc.CallOption) (*DictionaryListResp, error) {
	out := new(DictionaryListResp)
	err := c.cc.Invoke(ctx, Core_GetDictionaryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetDictionaryById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DictionaryInfo, error) {
	out := new(DictionaryInfo)
	err := c.cc.Invoke(ctx, Core_GetDictionaryById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteDictionary(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateDictionaryDetail(ctx context.Context, in *DictionaryDetailInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateDictionaryDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateDictionaryDetail(ctx context.Context, in *DictionaryDetailInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateDictionaryDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetDictionaryDetailList(ctx context.Context, in *DictionaryDetailListReq, opts ...grpc.CallOption) (*DictionaryDetailListResp, error) {
	out := new(DictionaryDetailListResp)
	err := c.cc.Invoke(ctx, Core_GetDictionaryDetailList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetDictionaryDetailById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DictionaryDetailInfo, error) {
	out := new(DictionaryDetailInfo)
	err := c.cc.Invoke(ctx, Core_GetDictionaryDetailById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteDictionaryDetail(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteDictionaryDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetDictionaryDetailByDictionaryName(ctx context.Context, in *BaseMsg, opts ...grpc.CallOption) (*DictionaryDetailListResp, error) {
	out := new(DictionaryDetailListResp)
	err := c.cc.Invoke(ctx, Core_GetDictionaryDetailByDictionaryName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetConfigMaps(ctx context.Context, in *GetConfigMapsReq, opts ...grpc.CallOption) (*GetConfigMapsResp, error) {
	out := new(GetConfigMapsResp)
	err := c.cc.Invoke(ctx, Core_GetConfigMaps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetConfigMapDetail(ctx context.Context, in *GetConfigMapDetailReq, opts ...grpc.CallOption) (*GetConfigMapDetailResp, error) {
	out := new(GetConfigMapDetailResp)
	err := c.cc.Invoke(ctx, Core_GetConfigMapDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteConfigMap(ctx context.Context, in *DeleteConfigMapReq, opts ...grpc.CallOption) (*DeleteConfigMapResp, error) {
	out := new(DeleteConfigMapResp)
	err := c.cc.Invoke(ctx, Core_DeleteConfigMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateConfigMap(ctx context.Context, in *UpdateConfigMapReq, opts ...grpc.CallOption) (*UpdateConfigMapResp, error) {
	out := new(UpdateConfigMapResp)
	err := c.cc.Invoke(ctx, Core_UpdateConfigMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetDeployments(ctx context.Context, in *GetDeploymentsReq, opts ...grpc.CallOption) (*GetDeploymentsResp, error) {
	out := new(GetDeploymentsResp)
	err := c.cc.Invoke(ctx, Core_GetDeployments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetDeploymentDetail(ctx context.Context, in *GetDeploymentDetailReq, opts ...grpc.CallOption) (*GetDeploymentDetailResp, error) {
	out := new(GetDeploymentDetailResp)
	err := c.cc.Invoke(ctx, Core_GetDeploymentDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ScaleDeployment(ctx context.Context, in *ScaleDeploymentReq, opts ...grpc.CallOption) (*ScaleDeploymentResp, error) {
	out := new(ScaleDeploymentResp)
	err := c.cc.Invoke(ctx, Core_ScaleDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateDeployment(ctx context.Context, in *CreateDeploymentReq, opts ...grpc.CallOption) (*CreateDeploymentResp, error) {
	out := new(CreateDeploymentResp)
	err := c.cc.Invoke(ctx, Core_CreateDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteDeployment(ctx context.Context, in *DeleteDeploymentReq, opts ...grpc.CallOption) (*DeleteDeploymentResp, error) {
	out := new(DeleteDeploymentResp)
	err := c.cc.Invoke(ctx, Core_DeleteDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) RestartDeployment(ctx context.Context, in *RestartDeploymentReq, opts ...grpc.CallOption) (*RestartDeploymentResp, error) {
	out := new(RestartDeploymentResp)
	err := c.cc.Invoke(ctx, Core_RestartDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateDeployment(ctx context.Context, in *UpdateDeploymentReq, opts ...grpc.CallOption) (*UpdateDeploymentResp, error) {
	out := new(UpdateDeploymentResp)
	err := c.cc.Invoke(ctx, Core_UpdateDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetDeployNumPerNp(ctx context.Context, in *GetDeployNumPerNpReq, opts ...grpc.CallOption) (*GetDeployNumPerNpResp, error) {
	out := new(GetDeployNumPerNpResp)
	err := c.cc.Invoke(ctx, Core_GetDeployNumPerNp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetNamespaces(ctx context.Context, in *GetNamespacesReq, opts ...grpc.CallOption) (*GetNamespacesResp, error) {
	out := new(GetNamespacesResp)
	err := c.cc.Invoke(ctx, Core_GetNamespaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetNamespaceDetail(ctx context.Context, in *GetNamespaceDetailReq, opts ...grpc.CallOption) (*GetNamespaceDetailResp, error) {
	out := new(GetNamespaceDetailResp)
	err := c.cc.Invoke(ctx, Core_GetNamespaceDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceReq, opts ...grpc.CallOption) (*DeleteNamespaceResp, error) {
	out := new(DeleteNamespaceResp)
	err := c.cc.Invoke(ctx, Core_DeleteNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetNodes(ctx context.Context, in *GetNodesReq, opts ...grpc.CallOption) (*GetNodesResp, error) {
	out := new(GetNodesResp)
	err := c.cc.Invoke(ctx, Core_GetNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetNodeDetail(ctx context.Context, in *GetNodeDetailReq, opts ...grpc.CallOption) (*GetNodeDetailResp, error) {
	out := new(GetNodeDetailResp)
	err := c.cc.Invoke(ctx, Core_GetNodeDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetPods(ctx context.Context, in *GetPodsReq, opts ...grpc.CallOption) (*GetPodsResp, error) {
	out := new(GetPodsResp)
	err := c.cc.Invoke(ctx, Core_GetPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetPodDetail(ctx context.Context, in *GetPodDetailReq, opts ...grpc.CallOption) (*GetPodDetailResp, error) {
	out := new(GetPodDetailResp)
	err := c.cc.Invoke(ctx, Core_GetPodDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeletePod(ctx context.Context, in *DeletePodReq, opts ...grpc.CallOption) (*DeletePodResp, error) {
	out := new(DeletePodResp)
	err := c.cc.Invoke(ctx, Core_DeletePod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdatePod(ctx context.Context, in *UpdatePodReq, opts ...grpc.CallOption) (*UpdatePodResp, error) {
	out := new(UpdatePodResp)
	err := c.cc.Invoke(ctx, Core_UpdatePod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetPodContainer(ctx context.Context, in *GetPodContainerReq, opts ...grpc.CallOption) (*GetPodContainerResp, error) {
	out := new(GetPodContainerResp)
	err := c.cc.Invoke(ctx, Core_GetPodContainer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetPodLog(ctx context.Context, in *GetPodLogReq, opts ...grpc.CallOption) (*GetPodLogResp, error) {
	out := new(GetPodLogResp)
	err := c.cc.Invoke(ctx, Core_GetPodLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetPodNumPerNp(ctx context.Context, in *GetPodNumPerNpReq, opts ...grpc.CallOption) (*GetPodNumPerNpResp, error) {
	out := new(GetPodNumPerNpResp)
	err := c.cc.Invoke(ctx, Core_GetPodNumPerNp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetServices(ctx context.Context, in *GetServicesReq, opts ...grpc.CallOption) (*GetServicesResp, error) {
	out := new(GetServicesResp)
	err := c.cc.Invoke(ctx, Core_GetServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetServiceDetail(ctx context.Context, in *GetServiceDetailReq, opts ...grpc.CallOption) (*GetServiceDetailResp, error) {
	out := new(GetServiceDetailResp)
	err := c.cc.Invoke(ctx, Core_GetServiceDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateService(ctx context.Context, in *CreateServiceReq, opts ...grpc.CallOption) (*CreateServiceResp, error) {
	out := new(CreateServiceResp)
	err := c.cc.Invoke(ctx, Core_CreateService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteService(ctx context.Context, in *DeleteServiceReq, opts ...grpc.CallOption) (*DeleteServiceResp, error) {
	out := new(DeleteServiceResp)
	err := c.cc.Invoke(ctx, Core_DeleteService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateService(ctx context.Context, in *UpdateServiceReq, opts ...grpc.CallOption) (*UpdateServiceResp, error) {
	out := new(UpdateServiceResp)
	err := c.cc.Invoke(ctx, Core_UpdateService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateMenu(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateMenu(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetMenuListByRole(ctx context.Context, in *BaseMsg, opts ...grpc.CallOption) (*MenuInfoList, error) {
	out := new(MenuInfoList)
	err := c.cc.Invoke(ctx, Core_GetMenuListByRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetMenuList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuInfoList, error) {
	out := new(MenuInfoList)
	err := c.cc.Invoke(ctx, Core_GetMenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateOauthProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateOauthProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetOauthProviderList(ctx context.Context, in *OauthProviderListReq, opts ...grpc.CallOption) (*OauthProviderListResp, error) {
	out := new(OauthProviderListResp)
	err := c.cc.Invoke(ctx, Core_GetOauthProviderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetOauthProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthProviderInfo, error) {
	out := new(OauthProviderInfo)
	err := c.cc.Invoke(ctx, Core_GetOauthProviderById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteOauthProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteOauthProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthRedirectResp, error) {
	out := new(OauthRedirectResp)
	err := c.cc.Invoke(ctx, Core_OauthLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) OauthCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, Core_OauthCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreatePosition(ctx context.Context, in *PositionInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreatePosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdatePosition(ctx context.Context, in *PositionInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdatePosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetPositionList(ctx context.Context, in *PositionListReq, opts ...grpc.CallOption) (*PositionListResp, error) {
	out := new(PositionListResp)
	err := c.cc.Invoke(ctx, Core_GetPositionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetPositionById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*PositionInfo, error) {
	out := new(PositionInfo)
	err := c.cc.Invoke(ctx, Core_GetPositionById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeletePosition(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeletePosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetRoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error) {
	out := new(RoleListResp)
	err := c.cc.Invoke(ctx, Core_GetRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetRoleById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RoleInfo, error) {
	out := new(RoleInfo)
	err := c.cc.Invoke(ctx, Core_GetRoleById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteRole(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	out := new(BaseUUIDResp)
	err := c.cc.Invoke(ctx, Core_CreateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteToken(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetTokenList(ctx context.Context, in *TokenListReq, opts ...grpc.CallOption) (*TokenListResp, error) {
	out := new(TokenListResp)
	err := c.cc.Invoke(ctx, Core_GetTokenList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetTokenById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TokenInfo, error) {
	out := new(TokenInfo)
	err := c.cc.Invoke(ctx, Core_GetTokenById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BlockUserAllToken(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_BlockUserAllToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	out := new(BaseUUIDResp)
	err := c.cc.Invoke(ctx, Core_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetUserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	out := new(UserListResp)
	err := c.cc.Invoke(ctx, Core_GetUserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetUserById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, Core_GetUserById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetUserByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, Core_GetUserByUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteUser(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServer is the server API for Core service.
// All implementations must embed UnimplementedCoreServer
// for forward compatibility
type CoreServer interface {
	// API management
	// group: api
	CreateApi(context.Context, *ApiInfo) (*BaseIDResp, error)
	// group: api
	UpdateApi(context.Context, *ApiInfo) (*BaseResp, error)
	// group: api
	GetApiList(context.Context, *ApiListReq) (*ApiListResp, error)
	// group: api
	GetApiById(context.Context, *IDReq) (*ApiInfo, error)
	// group: api
	DeleteApi(context.Context, *IDsReq) (*BaseResp, error)
	// group: authority
	GetMenuAuthority(context.Context, *IDReq) (*RoleMenuAuthorityResp, error)
	// group: authority
	CreateOrUpdateMenuAuthority(context.Context, *RoleMenuAuthorityReq) (*BaseResp, error)
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	// Department management
	// group: department
	CreateDepartment(context.Context, *DepartmentInfo) (*BaseIDResp, error)
	// group: department
	UpdateDepartment(context.Context, *DepartmentInfo) (*BaseResp, error)
	// group: department
	GetDepartmentList(context.Context, *DepartmentListReq) (*DepartmentListResp, error)
	// group: department
	GetDepartmentById(context.Context, *IDReq) (*DepartmentInfo, error)
	// group: department
	DeleteDepartment(context.Context, *IDsReq) (*BaseResp, error)
	// Dictionary management
	// group: dictionary
	CreateDictionary(context.Context, *DictionaryInfo) (*BaseIDResp, error)
	// group: dictionary
	UpdateDictionary(context.Context, *DictionaryInfo) (*BaseResp, error)
	// group: dictionary
	GetDictionaryList(context.Context, *DictionaryListReq) (*DictionaryListResp, error)
	// group: dictionary
	GetDictionaryById(context.Context, *IDReq) (*DictionaryInfo, error)
	// group: dictionary
	DeleteDictionary(context.Context, *IDsReq) (*BaseResp, error)
	// DictionaryDetail management
	// group: dictionarydetail
	CreateDictionaryDetail(context.Context, *DictionaryDetailInfo) (*BaseIDResp, error)
	// group: dictionarydetail
	UpdateDictionaryDetail(context.Context, *DictionaryDetailInfo) (*BaseResp, error)
	// group: dictionarydetail
	GetDictionaryDetailList(context.Context, *DictionaryDetailListReq) (*DictionaryDetailListResp, error)
	// group: dictionarydetail
	GetDictionaryDetailById(context.Context, *IDReq) (*DictionaryDetailInfo, error)
	// group: dictionarydetail
	DeleteDictionaryDetail(context.Context, *IDsReq) (*BaseResp, error)
	// group: dictionarydetail
	GetDictionaryDetailByDictionaryName(context.Context, *BaseMsg) (*DictionaryDetailListResp, error)
	// group: k8sconfigmap
	GetConfigMaps(context.Context, *GetConfigMapsReq) (*GetConfigMapsResp, error)
	// group: k8sconfigmap
	GetConfigMapDetail(context.Context, *GetConfigMapDetailReq) (*GetConfigMapDetailResp, error)
	// group: k8sconfigmap
	DeleteConfigMap(context.Context, *DeleteConfigMapReq) (*DeleteConfigMapResp, error)
	// group: k8sconfigmap
	UpdateConfigMap(context.Context, *UpdateConfigMapReq) (*UpdateConfigMapResp, error)
	// group: k8sdeployment
	GetDeployments(context.Context, *GetDeploymentsReq) (*GetDeploymentsResp, error)
	// group: k8sdeployment
	GetDeploymentDetail(context.Context, *GetDeploymentDetailReq) (*GetDeploymentDetailResp, error)
	// group: k8sdeployment
	ScaleDeployment(context.Context, *ScaleDeploymentReq) (*ScaleDeploymentResp, error)
	// group: k8sdeployment
	CreateDeployment(context.Context, *CreateDeploymentReq) (*CreateDeploymentResp, error)
	// group: k8sdeployment
	DeleteDeployment(context.Context, *DeleteDeploymentReq) (*DeleteDeploymentResp, error)
	// group: k8sdeployment
	RestartDeployment(context.Context, *RestartDeploymentReq) (*RestartDeploymentResp, error)
	// group: k8sdeployment
	UpdateDeployment(context.Context, *UpdateDeploymentReq) (*UpdateDeploymentResp, error)
	// group: k8sdeployment
	GetDeployNumPerNp(context.Context, *GetDeployNumPerNpReq) (*GetDeployNumPerNpResp, error)
	// group: k8snamespace
	GetNamespaces(context.Context, *GetNamespacesReq) (*GetNamespacesResp, error)
	// group: k8snamespace
	GetNamespaceDetail(context.Context, *GetNamespaceDetailReq) (*GetNamespaceDetailResp, error)
	// group: k8snamespace
	DeleteNamespace(context.Context, *DeleteNamespaceReq) (*DeleteNamespaceResp, error)
	// group: k8snode
	GetNodes(context.Context, *GetNodesReq) (*GetNodesResp, error)
	// group: k8snode
	GetNodeDetail(context.Context, *GetNodeDetailReq) (*GetNodeDetailResp, error)
	// group: k8spod
	GetPods(context.Context, *GetPodsReq) (*GetPodsResp, error)
	// group: k8spod
	GetPodDetail(context.Context, *GetPodDetailReq) (*GetPodDetailResp, error)
	// group: k8spod
	DeletePod(context.Context, *DeletePodReq) (*DeletePodResp, error)
	// group: k8spod
	UpdatePod(context.Context, *UpdatePodReq) (*UpdatePodResp, error)
	// group: k8spod
	GetPodContainer(context.Context, *GetPodContainerReq) (*GetPodContainerResp, error)
	// group: k8spod
	GetPodLog(context.Context, *GetPodLogReq) (*GetPodLogResp, error)
	// group: k8spod
	GetPodNumPerNp(context.Context, *GetPodNumPerNpReq) (*GetPodNumPerNpResp, error)
	// group: k8sservice
	GetServices(context.Context, *GetServicesReq) (*GetServicesResp, error)
	// group: k8sservice
	GetServiceDetail(context.Context, *GetServiceDetailReq) (*GetServiceDetailResp, error)
	// group: k8sservice
	CreateService(context.Context, *CreateServiceReq) (*CreateServiceResp, error)
	// group: k8sservice
	DeleteService(context.Context, *DeleteServiceReq) (*DeleteServiceResp, error)
	// group: k8sservice
	UpdateService(context.Context, *UpdateServiceReq) (*UpdateServiceResp, error)
	// group: menu
	CreateMenu(context.Context, *MenuInfo) (*BaseIDResp, error)
	// group: menu
	UpdateMenu(context.Context, *MenuInfo) (*BaseResp, error)
	// group: menu
	DeleteMenu(context.Context, *IDReq) (*BaseResp, error)
	// group: menu
	GetMenuListByRole(context.Context, *BaseMsg) (*MenuInfoList, error)
	// group: menu
	GetMenuList(context.Context, *PageInfoReq) (*MenuInfoList, error)
	// OauthProvider management
	// group: oauthprovider
	CreateOauthProvider(context.Context, *OauthProviderInfo) (*BaseIDResp, error)
	// group: oauthprovider
	UpdateOauthProvider(context.Context, *OauthProviderInfo) (*BaseResp, error)
	// group: oauthprovider
	GetOauthProviderList(context.Context, *OauthProviderListReq) (*OauthProviderListResp, error)
	// group: oauthprovider
	GetOauthProviderById(context.Context, *IDReq) (*OauthProviderInfo, error)
	// group: oauthprovider
	DeleteOauthProvider(context.Context, *IDsReq) (*BaseResp, error)
	// group: oauthprovider
	OauthLogin(context.Context, *OauthLoginReq) (*OauthRedirectResp, error)
	// group: oauthprovider
	OauthCallback(context.Context, *CallbackReq) (*UserInfo, error)
	// Position management
	// group: position
	CreatePosition(context.Context, *PositionInfo) (*BaseIDResp, error)
	// group: position
	UpdatePosition(context.Context, *PositionInfo) (*BaseResp, error)
	// group: position
	GetPositionList(context.Context, *PositionListReq) (*PositionListResp, error)
	// group: position
	GetPositionById(context.Context, *IDReq) (*PositionInfo, error)
	// group: position
	DeletePosition(context.Context, *IDsReq) (*BaseResp, error)
	// Role management
	// group: role
	CreateRole(context.Context, *RoleInfo) (*BaseIDResp, error)
	// group: role
	UpdateRole(context.Context, *RoleInfo) (*BaseResp, error)
	// group: role
	GetRoleList(context.Context, *RoleListReq) (*RoleListResp, error)
	// group: role
	GetRoleById(context.Context, *IDReq) (*RoleInfo, error)
	// group: role
	DeleteRole(context.Context, *IDsReq) (*BaseResp, error)
	// Token management
	// group: token
	CreateToken(context.Context, *TokenInfo) (*BaseUUIDResp, error)
	// group: token
	DeleteToken(context.Context, *UUIDsReq) (*BaseResp, error)
	// group: token
	GetTokenList(context.Context, *TokenListReq) (*TokenListResp, error)
	// group: token
	GetTokenById(context.Context, *UUIDReq) (*TokenInfo, error)
	// group: token
	BlockUserAllToken(context.Context, *UUIDReq) (*BaseResp, error)
	// group: token
	UpdateToken(context.Context, *TokenInfo) (*BaseResp, error)
	// User management
	// group: user
	CreateUser(context.Context, *UserInfo) (*BaseUUIDResp, error)
	// group: user
	UpdateUser(context.Context, *UserInfo) (*BaseResp, error)
	// group: user
	GetUserList(context.Context, *UserListReq) (*UserListResp, error)
	// group: user
	GetUserById(context.Context, *UUIDReq) (*UserInfo, error)
	// group: user
	GetUserByUsername(context.Context, *UsernameReq) (*UserInfo, error)
	// group: user
	DeleteUser(context.Context, *UUIDsReq) (*BaseResp, error)
	mustEmbedUnimplementedCoreServer()
}

// UnimplementedCoreServer must be embedded to have forward compatible implementations.
type UnimplementedCoreServer struct {
}

func (UnimplementedCoreServer) CreateApi(context.Context, *ApiInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApi not implemented")
}
func (UnimplementedCoreServer) UpdateApi(context.Context, *ApiInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApi not implemented")
}
func (UnimplementedCoreServer) GetApiList(context.Context, *ApiListReq) (*ApiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiList not implemented")
}
func (UnimplementedCoreServer) GetApiById(context.Context, *IDReq) (*ApiInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiById not implemented")
}
func (UnimplementedCoreServer) DeleteApi(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApi not implemented")
}
func (UnimplementedCoreServer) GetMenuAuthority(context.Context, *IDReq) (*RoleMenuAuthorityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuAuthority not implemented")
}
func (UnimplementedCoreServer) CreateOrUpdateMenuAuthority(context.Context, *RoleMenuAuthorityReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateMenuAuthority not implemented")
}
func (UnimplementedCoreServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedCoreServer) CreateDepartment(context.Context, *DepartmentInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedCoreServer) UpdateDepartment(context.Context, *DepartmentInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedCoreServer) GetDepartmentList(context.Context, *DepartmentListReq) (*DepartmentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentList not implemented")
}
func (UnimplementedCoreServer) GetDepartmentById(context.Context, *IDReq) (*DepartmentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentById not implemented")
}
func (UnimplementedCoreServer) DeleteDepartment(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedCoreServer) CreateDictionary(context.Context, *DictionaryInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictionary not implemented")
}
func (UnimplementedCoreServer) UpdateDictionary(context.Context, *DictionaryInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictionary not implemented")
}
func (UnimplementedCoreServer) GetDictionaryList(context.Context, *DictionaryListReq) (*DictionaryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryList not implemented")
}
func (UnimplementedCoreServer) GetDictionaryById(context.Context, *IDReq) (*DictionaryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryById not implemented")
}
func (UnimplementedCoreServer) DeleteDictionary(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictionary not implemented")
}
func (UnimplementedCoreServer) CreateDictionaryDetail(context.Context, *DictionaryDetailInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictionaryDetail not implemented")
}
func (UnimplementedCoreServer) UpdateDictionaryDetail(context.Context, *DictionaryDetailInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictionaryDetail not implemented")
}
func (UnimplementedCoreServer) GetDictionaryDetailList(context.Context, *DictionaryDetailListReq) (*DictionaryDetailListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryDetailList not implemented")
}
func (UnimplementedCoreServer) GetDictionaryDetailById(context.Context, *IDReq) (*DictionaryDetailInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryDetailById not implemented")
}
func (UnimplementedCoreServer) DeleteDictionaryDetail(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictionaryDetail not implemented")
}
func (UnimplementedCoreServer) GetDictionaryDetailByDictionaryName(context.Context, *BaseMsg) (*DictionaryDetailListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryDetailByDictionaryName not implemented")
}
func (UnimplementedCoreServer) GetConfigMaps(context.Context, *GetConfigMapsReq) (*GetConfigMapsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigMaps not implemented")
}
func (UnimplementedCoreServer) GetConfigMapDetail(context.Context, *GetConfigMapDetailReq) (*GetConfigMapDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigMapDetail not implemented")
}
func (UnimplementedCoreServer) DeleteConfigMap(context.Context, *DeleteConfigMapReq) (*DeleteConfigMapResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigMap not implemented")
}
func (UnimplementedCoreServer) UpdateConfigMap(context.Context, *UpdateConfigMapReq) (*UpdateConfigMapResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigMap not implemented")
}
func (UnimplementedCoreServer) GetDeployments(context.Context, *GetDeploymentsReq) (*GetDeploymentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployments not implemented")
}
func (UnimplementedCoreServer) GetDeploymentDetail(context.Context, *GetDeploymentDetailReq) (*GetDeploymentDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentDetail not implemented")
}
func (UnimplementedCoreServer) ScaleDeployment(context.Context, *ScaleDeploymentReq) (*ScaleDeploymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleDeployment not implemented")
}
func (UnimplementedCoreServer) CreateDeployment(context.Context, *CreateDeploymentReq) (*CreateDeploymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedCoreServer) DeleteDeployment(context.Context, *DeleteDeploymentReq) (*DeleteDeploymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployment not implemented")
}
func (UnimplementedCoreServer) RestartDeployment(context.Context, *RestartDeploymentReq) (*RestartDeploymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartDeployment not implemented")
}
func (UnimplementedCoreServer) UpdateDeployment(context.Context, *UpdateDeploymentReq) (*UpdateDeploymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeployment not implemented")
}
func (UnimplementedCoreServer) GetDeployNumPerNp(context.Context, *GetDeployNumPerNpReq) (*GetDeployNumPerNpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployNumPerNp not implemented")
}
func (UnimplementedCoreServer) GetNamespaces(context.Context, *GetNamespacesReq) (*GetNamespacesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaces not implemented")
}
func (UnimplementedCoreServer) GetNamespaceDetail(context.Context, *GetNamespaceDetailReq) (*GetNamespaceDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaceDetail not implemented")
}
func (UnimplementedCoreServer) DeleteNamespace(context.Context, *DeleteNamespaceReq) (*DeleteNamespaceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedCoreServer) GetNodes(context.Context, *GetNodesReq) (*GetNodesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedCoreServer) GetNodeDetail(context.Context, *GetNodeDetailReq) (*GetNodeDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeDetail not implemented")
}
func (UnimplementedCoreServer) GetPods(context.Context, *GetPodsReq) (*GetPodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPods not implemented")
}
func (UnimplementedCoreServer) GetPodDetail(context.Context, *GetPodDetailReq) (*GetPodDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodDetail not implemented")
}
func (UnimplementedCoreServer) DeletePod(context.Context, *DeletePodReq) (*DeletePodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePod not implemented")
}
func (UnimplementedCoreServer) UpdatePod(context.Context, *UpdatePodReq) (*UpdatePodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePod not implemented")
}
func (UnimplementedCoreServer) GetPodContainer(context.Context, *GetPodContainerReq) (*GetPodContainerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodContainer not implemented")
}
func (UnimplementedCoreServer) GetPodLog(context.Context, *GetPodLogReq) (*GetPodLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodLog not implemented")
}
func (UnimplementedCoreServer) GetPodNumPerNp(context.Context, *GetPodNumPerNpReq) (*GetPodNumPerNpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodNumPerNp not implemented")
}
func (UnimplementedCoreServer) GetServices(context.Context, *GetServicesReq) (*GetServicesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedCoreServer) GetServiceDetail(context.Context, *GetServiceDetailReq) (*GetServiceDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceDetail not implemented")
}
func (UnimplementedCoreServer) CreateService(context.Context, *CreateServiceReq) (*CreateServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedCoreServer) DeleteService(context.Context, *DeleteServiceReq) (*DeleteServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedCoreServer) UpdateService(context.Context, *UpdateServiceReq) (*UpdateServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedCoreServer) CreateMenu(context.Context, *MenuInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedCoreServer) UpdateMenu(context.Context, *MenuInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedCoreServer) DeleteMenu(context.Context, *IDReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedCoreServer) GetMenuListByRole(context.Context, *BaseMsg) (*MenuInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuListByRole not implemented")
}
func (UnimplementedCoreServer) GetMenuList(context.Context, *PageInfoReq) (*MenuInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuList not implemented")
}
func (UnimplementedCoreServer) CreateOauthProvider(context.Context, *OauthProviderInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOauthProvider not implemented")
}
func (UnimplementedCoreServer) UpdateOauthProvider(context.Context, *OauthProviderInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOauthProvider not implemented")
}
func (UnimplementedCoreServer) GetOauthProviderList(context.Context, *OauthProviderListReq) (*OauthProviderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthProviderList not implemented")
}
func (UnimplementedCoreServer) GetOauthProviderById(context.Context, *IDReq) (*OauthProviderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthProviderById not implemented")
}
func (UnimplementedCoreServer) DeleteOauthProvider(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOauthProvider not implemented")
}
func (UnimplementedCoreServer) OauthLogin(context.Context, *OauthLoginReq) (*OauthRedirectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthLogin not implemented")
}
func (UnimplementedCoreServer) OauthCallback(context.Context, *CallbackReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthCallback not implemented")
}
func (UnimplementedCoreServer) CreatePosition(context.Context, *PositionInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosition not implemented")
}
func (UnimplementedCoreServer) UpdatePosition(context.Context, *PositionInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosition not implemented")
}
func (UnimplementedCoreServer) GetPositionList(context.Context, *PositionListReq) (*PositionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionList not implemented")
}
func (UnimplementedCoreServer) GetPositionById(context.Context, *IDReq) (*PositionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionById not implemented")
}
func (UnimplementedCoreServer) DeletePosition(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosition not implemented")
}
func (UnimplementedCoreServer) CreateRole(context.Context, *RoleInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedCoreServer) UpdateRole(context.Context, *RoleInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedCoreServer) GetRoleList(context.Context, *RoleListReq) (*RoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleList not implemented")
}
func (UnimplementedCoreServer) GetRoleById(context.Context, *IDReq) (*RoleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleById not implemented")
}
func (UnimplementedCoreServer) DeleteRole(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedCoreServer) CreateToken(context.Context, *TokenInfo) (*BaseUUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedCoreServer) DeleteToken(context.Context, *UUIDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (UnimplementedCoreServer) GetTokenList(context.Context, *TokenListReq) (*TokenListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenList not implemented")
}
func (UnimplementedCoreServer) GetTokenById(context.Context, *UUIDReq) (*TokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenById not implemented")
}
func (UnimplementedCoreServer) BlockUserAllToken(context.Context, *UUIDReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUserAllToken not implemented")
}
func (UnimplementedCoreServer) UpdateToken(context.Context, *TokenInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (UnimplementedCoreServer) CreateUser(context.Context, *UserInfo) (*BaseUUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedCoreServer) UpdateUser(context.Context, *UserInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedCoreServer) GetUserList(context.Context, *UserListReq) (*UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedCoreServer) GetUserById(context.Context, *UUIDReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedCoreServer) GetUserByUsername(context.Context, *UsernameReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUsername not implemented")
}
func (UnimplementedCoreServer) DeleteUser(context.Context, *UUIDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedCoreServer) mustEmbedUnimplementedCoreServer() {}

// UnsafeCoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServer will
// result in compilation errors.
type UnsafeCoreServer interface {
	mustEmbedUnimplementedCoreServer()
}

func RegisterCoreServer(s grpc.ServiceRegistrar, srv CoreServer) {
	s.RegisterService(&Core_ServiceDesc, srv)
}

func _Core_CreateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateApi(ctx, req.(*ApiInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateApi(ctx, req.(*ApiInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetApiList(ctx, req.(*ApiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetApiById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetApiById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetApiById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetApiById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteApi(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetMenuAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetMenuAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetMenuAuthority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetMenuAuthority(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateOrUpdateMenuAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMenuAuthorityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateOrUpdateMenuAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateOrUpdateMenuAuthority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateOrUpdateMenuAuthority(ctx, req.(*RoleMenuAuthorityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_InitDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateDepartment(ctx, req.(*DepartmentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateDepartment(ctx, req.(*DepartmentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetDepartmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetDepartmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetDepartmentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetDepartmentList(ctx, req.(*DepartmentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetDepartmentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetDepartmentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetDepartmentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetDepartmentById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteDepartment(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateDictionary(ctx, req.(*DictionaryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateDictionary(ctx, req.(*DictionaryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetDictionaryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetDictionaryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetDictionaryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetDictionaryList(ctx, req.(*DictionaryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetDictionaryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetDictionaryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetDictionaryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetDictionaryById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteDictionary(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateDictionaryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryDetailInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateDictionaryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateDictionaryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateDictionaryDetail(ctx, req.(*DictionaryDetailInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateDictionaryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryDetailInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateDictionaryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateDictionaryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateDictionaryDetail(ctx, req.(*DictionaryDetailInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetDictionaryDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryDetailListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetDictionaryDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetDictionaryDetailList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetDictionaryDetailList(ctx, req.(*DictionaryDetailListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetDictionaryDetailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetDictionaryDetailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetDictionaryDetailById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetDictionaryDetailById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteDictionaryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteDictionaryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteDictionaryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteDictionaryDetail(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetDictionaryDetailByDictionaryName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetDictionaryDetailByDictionaryName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetDictionaryDetailByDictionaryName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetDictionaryDetailByDictionaryName(ctx, req.(*BaseMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetConfigMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigMapsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetConfigMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetConfigMaps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetConfigMaps(ctx, req.(*GetConfigMapsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetConfigMapDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigMapDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetConfigMapDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetConfigMapDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetConfigMapDetail(ctx, req.(*GetConfigMapDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteConfigMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteConfigMap(ctx, req.(*DeleteConfigMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateConfigMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateConfigMap(ctx, req.(*UpdateConfigMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetDeployments(ctx, req.(*GetDeploymentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetDeploymentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetDeploymentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetDeploymentDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetDeploymentDetail(ctx, req.(*GetDeploymentDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ScaleDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ScaleDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_ScaleDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ScaleDeployment(ctx, req.(*ScaleDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateDeployment(ctx, req.(*CreateDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteDeployment(ctx, req.(*DeleteDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_RestartDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).RestartDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_RestartDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).RestartDeployment(ctx, req.(*RestartDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateDeployment(ctx, req.(*UpdateDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetDeployNumPerNp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeployNumPerNpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetDeployNumPerNp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetDeployNumPerNp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetDeployNumPerNp(ctx, req.(*GetDeployNumPerNpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespacesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetNamespaces(ctx, req.(*GetNamespacesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetNamespaceDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetNamespaceDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetNamespaceDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetNamespaceDetail(ctx, req.(*GetNamespaceDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteNamespace(ctx, req.(*DeleteNamespaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetNodes(ctx, req.(*GetNodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetNodeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetNodeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetNodeDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetNodeDetail(ctx, req.(*GetNodeDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetPods(ctx, req.(*GetPodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetPodDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetPodDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetPodDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetPodDetail(ctx, req.(*GetPodDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeletePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeletePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeletePod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeletePod(ctx, req.(*DeletePodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdatePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdatePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdatePod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdatePod(ctx, req.(*UpdatePodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetPodContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodContainerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetPodContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetPodContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetPodContainer(ctx, req.(*GetPodContainerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetPodLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetPodLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetPodLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetPodLog(ctx, req.(*GetPodLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetPodNumPerNp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodNumPerNpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetPodNumPerNp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetPodNumPerNp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetPodNumPerNp(ctx, req.(*GetPodNumPerNpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetServices(ctx, req.(*GetServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetServiceDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetServiceDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetServiceDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetServiceDetail(ctx, req.(*GetServiceDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateService(ctx, req.(*CreateServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteService(ctx, req.(*DeleteServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateService(ctx, req.(*UpdateServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateMenu(ctx, req.(*MenuInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateMenu(ctx, req.(*MenuInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteMenu(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetMenuListByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetMenuListByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetMenuListByRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetMenuListByRole(ctx, req.(*BaseMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetMenuList(ctx, req.(*PageInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateOauthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthProviderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateOauthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateOauthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateOauthProvider(ctx, req.(*OauthProviderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateOauthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthProviderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateOauthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateOauthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateOauthProvider(ctx, req.(*OauthProviderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetOauthProviderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthProviderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetOauthProviderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetOauthProviderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetOauthProviderList(ctx, req.(*OauthProviderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetOauthProviderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetOauthProviderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetOauthProviderById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetOauthProviderById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteOauthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteOauthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteOauthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteOauthProvider(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_OauthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).OauthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_OauthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).OauthLogin(ctx, req.(*OauthLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_OauthCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).OauthCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_OauthCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).OauthCallback(ctx, req.(*CallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreatePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreatePosition(ctx, req.(*PositionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdatePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdatePosition(ctx, req.(*PositionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetPositionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetPositionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetPositionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetPositionList(ctx, req.(*PositionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetPositionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetPositionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetPositionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetPositionById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeletePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeletePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeletePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeletePosition(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateRole(ctx, req.(*RoleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateRole(ctx, req.(*RoleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetRoleList(ctx, req.(*RoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetRoleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetRoleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetRoleById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetRoleById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteRole(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateToken(ctx, req.(*TokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteToken(ctx, req.(*UUIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetTokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetTokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetTokenList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetTokenList(ctx, req.(*TokenListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetTokenById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetTokenById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetTokenById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetTokenById(ctx, req.(*UUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BlockUserAllToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BlockUserAllToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BlockUserAllToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BlockUserAllToken(ctx, req.(*UUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateToken(ctx, req.(*TokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetUserList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetUserById(ctx, req.(*UUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetUserByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetUserByUsername(ctx, req.(*UsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteUser(ctx, req.(*UUIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Core_ServiceDesc is the grpc.ServiceDesc for Core service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Core_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createApi",
			Handler:    _Core_CreateApi_Handler,
		},
		{
			MethodName: "updateApi",
			Handler:    _Core_UpdateApi_Handler,
		},
		{
			MethodName: "getApiList",
			Handler:    _Core_GetApiList_Handler,
		},
		{
			MethodName: "getApiById",
			Handler:    _Core_GetApiById_Handler,
		},
		{
			MethodName: "deleteApi",
			Handler:    _Core_DeleteApi_Handler,
		},
		{
			MethodName: "getMenuAuthority",
			Handler:    _Core_GetMenuAuthority_Handler,
		},
		{
			MethodName: "createOrUpdateMenuAuthority",
			Handler:    _Core_CreateOrUpdateMenuAuthority_Handler,
		},
		{
			MethodName: "initDatabase",
			Handler:    _Core_InitDatabase_Handler,
		},
		{
			MethodName: "createDepartment",
			Handler:    _Core_CreateDepartment_Handler,
		},
		{
			MethodName: "updateDepartment",
			Handler:    _Core_UpdateDepartment_Handler,
		},
		{
			MethodName: "getDepartmentList",
			Handler:    _Core_GetDepartmentList_Handler,
		},
		{
			MethodName: "getDepartmentById",
			Handler:    _Core_GetDepartmentById_Handler,
		},
		{
			MethodName: "deleteDepartment",
			Handler:    _Core_DeleteDepartment_Handler,
		},
		{
			MethodName: "createDictionary",
			Handler:    _Core_CreateDictionary_Handler,
		},
		{
			MethodName: "updateDictionary",
			Handler:    _Core_UpdateDictionary_Handler,
		},
		{
			MethodName: "getDictionaryList",
			Handler:    _Core_GetDictionaryList_Handler,
		},
		{
			MethodName: "getDictionaryById",
			Handler:    _Core_GetDictionaryById_Handler,
		},
		{
			MethodName: "deleteDictionary",
			Handler:    _Core_DeleteDictionary_Handler,
		},
		{
			MethodName: "createDictionaryDetail",
			Handler:    _Core_CreateDictionaryDetail_Handler,
		},
		{
			MethodName: "updateDictionaryDetail",
			Handler:    _Core_UpdateDictionaryDetail_Handler,
		},
		{
			MethodName: "getDictionaryDetailList",
			Handler:    _Core_GetDictionaryDetailList_Handler,
		},
		{
			MethodName: "getDictionaryDetailById",
			Handler:    _Core_GetDictionaryDetailById_Handler,
		},
		{
			MethodName: "deleteDictionaryDetail",
			Handler:    _Core_DeleteDictionaryDetail_Handler,
		},
		{
			MethodName: "getDictionaryDetailByDictionaryName",
			Handler:    _Core_GetDictionaryDetailByDictionaryName_Handler,
		},
		{
			MethodName: "getConfigMaps",
			Handler:    _Core_GetConfigMaps_Handler,
		},
		{
			MethodName: "getConfigMapDetail",
			Handler:    _Core_GetConfigMapDetail_Handler,
		},
		{
			MethodName: "deleteConfigMap",
			Handler:    _Core_DeleteConfigMap_Handler,
		},
		{
			MethodName: "updateConfigMap",
			Handler:    _Core_UpdateConfigMap_Handler,
		},
		{
			MethodName: "getDeployments",
			Handler:    _Core_GetDeployments_Handler,
		},
		{
			MethodName: "getDeploymentDetail",
			Handler:    _Core_GetDeploymentDetail_Handler,
		},
		{
			MethodName: "scaleDeployment",
			Handler:    _Core_ScaleDeployment_Handler,
		},
		{
			MethodName: "createDeployment",
			Handler:    _Core_CreateDeployment_Handler,
		},
		{
			MethodName: "deleteDeployment",
			Handler:    _Core_DeleteDeployment_Handler,
		},
		{
			MethodName: "restartDeployment",
			Handler:    _Core_RestartDeployment_Handler,
		},
		{
			MethodName: "updateDeployment",
			Handler:    _Core_UpdateDeployment_Handler,
		},
		{
			MethodName: "getDeployNumPerNp",
			Handler:    _Core_GetDeployNumPerNp_Handler,
		},
		{
			MethodName: "getNamespaces",
			Handler:    _Core_GetNamespaces_Handler,
		},
		{
			MethodName: "getNamespaceDetail",
			Handler:    _Core_GetNamespaceDetail_Handler,
		},
		{
			MethodName: "deleteNamespace",
			Handler:    _Core_DeleteNamespace_Handler,
		},
		{
			MethodName: "getNodes",
			Handler:    _Core_GetNodes_Handler,
		},
		{
			MethodName: "getNodeDetail",
			Handler:    _Core_GetNodeDetail_Handler,
		},
		{
			MethodName: "getPods",
			Handler:    _Core_GetPods_Handler,
		},
		{
			MethodName: "getPodDetail",
			Handler:    _Core_GetPodDetail_Handler,
		},
		{
			MethodName: "deletePod",
			Handler:    _Core_DeletePod_Handler,
		},
		{
			MethodName: "updatePod",
			Handler:    _Core_UpdatePod_Handler,
		},
		{
			MethodName: "getPodContainer",
			Handler:    _Core_GetPodContainer_Handler,
		},
		{
			MethodName: "getPodLog",
			Handler:    _Core_GetPodLog_Handler,
		},
		{
			MethodName: "getPodNumPerNp",
			Handler:    _Core_GetPodNumPerNp_Handler,
		},
		{
			MethodName: "getServices",
			Handler:    _Core_GetServices_Handler,
		},
		{
			MethodName: "getServiceDetail",
			Handler:    _Core_GetServiceDetail_Handler,
		},
		{
			MethodName: "createService",
			Handler:    _Core_CreateService_Handler,
		},
		{
			MethodName: "deleteService",
			Handler:    _Core_DeleteService_Handler,
		},
		{
			MethodName: "updateService",
			Handler:    _Core_UpdateService_Handler,
		},
		{
			MethodName: "createMenu",
			Handler:    _Core_CreateMenu_Handler,
		},
		{
			MethodName: "updateMenu",
			Handler:    _Core_UpdateMenu_Handler,
		},
		{
			MethodName: "deleteMenu",
			Handler:    _Core_DeleteMenu_Handler,
		},
		{
			MethodName: "getMenuListByRole",
			Handler:    _Core_GetMenuListByRole_Handler,
		},
		{
			MethodName: "getMenuList",
			Handler:    _Core_GetMenuList_Handler,
		},
		{
			MethodName: "createOauthProvider",
			Handler:    _Core_CreateOauthProvider_Handler,
		},
		{
			MethodName: "updateOauthProvider",
			Handler:    _Core_UpdateOauthProvider_Handler,
		},
		{
			MethodName: "getOauthProviderList",
			Handler:    _Core_GetOauthProviderList_Handler,
		},
		{
			MethodName: "getOauthProviderById",
			Handler:    _Core_GetOauthProviderById_Handler,
		},
		{
			MethodName: "deleteOauthProvider",
			Handler:    _Core_DeleteOauthProvider_Handler,
		},
		{
			MethodName: "oauthLogin",
			Handler:    _Core_OauthLogin_Handler,
		},
		{
			MethodName: "oauthCallback",
			Handler:    _Core_OauthCallback_Handler,
		},
		{
			MethodName: "createPosition",
			Handler:    _Core_CreatePosition_Handler,
		},
		{
			MethodName: "updatePosition",
			Handler:    _Core_UpdatePosition_Handler,
		},
		{
			MethodName: "getPositionList",
			Handler:    _Core_GetPositionList_Handler,
		},
		{
			MethodName: "getPositionById",
			Handler:    _Core_GetPositionById_Handler,
		},
		{
			MethodName: "deletePosition",
			Handler:    _Core_DeletePosition_Handler,
		},
		{
			MethodName: "createRole",
			Handler:    _Core_CreateRole_Handler,
		},
		{
			MethodName: "updateRole",
			Handler:    _Core_UpdateRole_Handler,
		},
		{
			MethodName: "getRoleList",
			Handler:    _Core_GetRoleList_Handler,
		},
		{
			MethodName: "getRoleById",
			Handler:    _Core_GetRoleById_Handler,
		},
		{
			MethodName: "deleteRole",
			Handler:    _Core_DeleteRole_Handler,
		},
		{
			MethodName: "createToken",
			Handler:    _Core_CreateToken_Handler,
		},
		{
			MethodName: "deleteToken",
			Handler:    _Core_DeleteToken_Handler,
		},
		{
			MethodName: "getTokenList",
			Handler:    _Core_GetTokenList_Handler,
		},
		{
			MethodName: "getTokenById",
			Handler:    _Core_GetTokenById_Handler,
		},
		{
			MethodName: "blockUserAllToken",
			Handler:    _Core_BlockUserAllToken_Handler,
		},
		{
			MethodName: "updateToken",
			Handler:    _Core_UpdateToken_Handler,
		},
		{
			MethodName: "createUser",
			Handler:    _Core_CreateUser_Handler,
		},
		{
			MethodName: "updateUser",
			Handler:    _Core_UpdateUser_Handler,
		},
		{
			MethodName: "getUserList",
			Handler:    _Core_GetUserList_Handler,
		},
		{
			MethodName: "getUserById",
			Handler:    _Core_GetUserById_Handler,
		},
		{
			MethodName: "getUserByUsername",
			Handler:    _Core_GetUserByUsername_Handler,
		},
		{
			MethodName: "deleteUser",
			Handler:    _Core_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/core.proto",
}
