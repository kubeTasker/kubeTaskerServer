syntax = "v1"

info(
    title: "type title here"
    desc: "type desc here"
    author: "type author here"
    email: "type email here"
    version: "type version here"
)

type (
    // WorkflowCreateRequest
    WorkflowCreateRequest {
        // Namespace
        Namespace string `json:"namespace"`
        // Workflow
        // github.com.kubeTasker.kubeTasker.pkg.apis.workflow.v1alpha1.Workflow
        Workflow TypeNull `json:"workflow"`
        // InstanceID
        InstanceID string `json:"instanceId"`
        // ServerDryRun
        ServerDryRun bool `json:"serverDryRun"`
        // CreateOptions
        // k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions
        CreateOptions TypeNull `json:"createOptions"`
    }

    // WorkflowGetRequest
    WorkflowGetRequest {
        // Name
        Name  string `json:"name"`
        // Namespace
        Namespace  string `json:"namespace"`
        // GetOptions
        // k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions
        GetOptions  TypeNull `json:"getOptions"`
    }

    // WorkflowListRequest
    WorkflowListRequest {
        // Namespace
        Namespace  string `json:"namespace"`
        // ListOptions
        // k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
        ListOptions  TypeNull `json:"listOptions"`
    }

    // WorkflowResubmitRequest
    WorkflowResubmitRequest {
        // Name
        Name  string `json:"name"`
        // Namespace
        Namespace  string `json:"namespace"`
        // Memoized
        Memoized  bool `json:"memoized"`
    }

    // WorkflowRetryRequest
    WorkflowRetryRequest {
        // Name
        Name  string `json:"name"`
        // Namespace
        Namespace  string `json:"namespace"`
    }

    // WorkflowResumeRequest
    WorkflowResumeRequest {
        // Name
        Name  string `json:"name"`
        // Namespace
        Namespace  string `json:"namespace"`
    }

    // WorkflowTerminateRequest
    WorkflowTerminateRequest {
        // Name
        Name  string `json:"name"`
        // Namespace
        Namespace  string `json:"namespace"`
    }

    // WorkflowSuspendRequest
    WorkflowSuspendRequest {
        // Name
        Name  string `json:"name"`
        // Namespace
        Namespace  string `json:"namespace"`
    }

    // WorkflowLogRequest
    WorkflowLogRequest {
        // Name
        Name  string `json:"name"`
        // Namespace
        Namespace  string `json:"namespace"`
        // PodName
        PodName  string `json:"podName"`
        // LogOptions
        // k8s.io.api.core.v1.PodLogOptions
        LogOptions  TypeNull `json:"logOptions"`
    }

    // WorkflowDeleteRequest
    WorkflowDeleteRequest {
        // Name
        Name  string `json:"name"`
        // Namespace
        Namespace  string `json:"namespace"`
        // DeleteOptions
        // k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions
        DeleteOptions  TypeNull `json:"deleteOptions"`
    }

    // WorkflowDeleteResponse
    WorkflowDeleteResponse {
    }

    // WatchWorkflowsRequest
    WatchWorkflowsRequest {
        // Namespace
        Namespace  string `json:"namespace"`
        // ListOptions
        // k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
        ListOptions  TypeNull `json:"listOptions"`
    }

    // WorkflowWatchEvent
    WorkflowWatchEvent {
        // Type
        Type  string `json:"type"`
        // Object
        // github.com.kubeTasker.kubeTasker.pkg.apis.workflow.v1alpha1.Workflow
        Object  TypeNull `json:"object"`
    }

    // LogEntry
    LogEntry {
        // Content
        Content  string `json:"content"`
    }

    // WorkflowLintRequest
    WorkflowLintRequest {
        // Namespace
        Namespace  string `json:"namespace"`
        // Workflow
        // github.com.kubeTasker.kubeTasker.pkg.apis.workflow.v1alpha1.Workflow
        Workflow  TypeNull `json:"workflow"`
    }

    // WorkflowResponse
    WorkflowResponse {
        // Workflow
        // github.com.kubeTasker.kubeTasker.pkg.apis.workflow.v1alpha1.Workflow
        Workflow  TypeNull `json:"workflow"`
    }

    // WorkflowListResponse
    WorkflowListResponse {
        // Workflowlist
        // github.com.kubeTasker.kubeTasker.pkg.apis.workflow.v1alpha1.WorkflowList
        Workflowlist  TypeNull `json:"workflowlist"`
    }

    // TypeNull
    TypeNull {

    }

    // WorkflowWatchEvents
    // Used to receive streams, not equally useful
    WorkflowWatchEvents {
        WorkflowWatchEvents []WorkflowWatchEvent `json:"workflowWatchEvents"`
    }
    
    // LogEntrys
    // Used to receive streams, not equally useful
    LogEntrys {
        LogEntrys []LogEntry `json:"logEntrys"`
    }
)

@server(
    jwt: Auth
    group: workflow
    middleware: Authority
)
service Core {
    // CreateWorkflow
    @handler CreateWorkflow
    post /workflow/create_workflow (WorkflowCreateRequest) returns (WorkflowResponse)
    // GetWorkflow
    @handler GetWorkflow
    get /workflow/get_workflow/:namespace/:name (WorkflowGetRequest) returns (WorkflowResponse)
    // ListWorkflows
    @handler ListWorkflows
    get /workflow/list_workflows/:namespace (WorkflowListRequest) returns (WorkflowListResponse)
    // WatchWorkflows
    @handler WatchWorkflows
    get /workflow/watch_workflows/:namespace (WatchWorkflowsRequest) returns (WorkflowWatchEvents)
    // DeleteWorkflow
    @handler DeleteWorkflow
    delete /workflow/delete_workflow/:namespace/:name (WorkflowDeleteRequest) returns (WorkflowDeleteResponse)
    // RetryWorkflow
    @handler RetryWorkflow
    put /workflow/retry_workflow/:namespace/:name (WorkflowRetryRequest) returns (WorkflowResponse)
    // ResubmitWorkflow
    @handler ResubmitWorkflow
    put /workflow/resubmit_workflow/:namespace/:name (WorkflowResubmitRequest) returns (WorkflowResponse)
    // ResumeWorkflow
    @handler ResumeWorkflow
    put /workflow/resume_workflow/:namespace/:name (WorkflowResumeRequest) returns (WorkflowResponse)
    // SuspendWorkflow
    @handler SuspendWorkflow
    put /workflow/suspend_workflow/:namespace/:name (WorkflowSuspendRequest) returns (WorkflowResponse)
    // TerminateWorkflow
    @handler TerminateWorkflow
    put /workflow/terminate_workflow/:namespace/:name (WorkflowTerminateRequest) returns (WorkflowResponse)
    // LintWorkflow
    @handler LintWorkflow
    post /workflow/lint_workflow/:namespace (WorkflowLintRequest) returns (WorkflowResponse)
    // PodLogs
    @handler PodLogs
    get /workflow/pod_logs/:namespace/:name/:podName (WorkflowLogRequest) returns (LogEntrys)
}